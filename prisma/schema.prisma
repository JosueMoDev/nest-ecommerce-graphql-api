// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  USER
  SUPERUSER
}

enum NeuralEngine {
  SixTeenCores
  ThirtyCores
}

enum CapacityOn {
  GB
  TB
}

enum ChipFamilyName {
  M1
  M2
  M3
  S8
  S9
  A15
  A16
  A17
}

enum ChipGama {
  BASE
  PRO
  BIONIC
  MAX
  ULTRA
}

enum Gender {
  DISPLAY
  LAPTOP
  DESKTOP
  PHONE
  TABLET
  WATCH
  AUDIO
  ACCESSORY
  VISION
}

enum CategoryName {
  IPHONE
  IPAD
  WATCH
  MAC
  VISION
  AIRPODS
  TVHOME
  ACCESSORIES
}

model Cpu {
  id           String         @id @default(uuid())
  cores        Int
  // * Relations
  configOnChip ConfigOnChip[]
}

model Gpu {
  id    String @id @default(uuid())
  cores Int
  // * Relations

  configOnChip ConfigOnChip[]
}

model ConfigOnChip {
  id String @id @default(uuid())

  chip   Chip   @relation(fields: [chipId], references: [id])
  chipId String

  neuralEngine NeuralEngine

  gpu   Gpu    @relation(fields: [gpuId], references: [id])
  gpuId String

  cpu   Cpu    @relation(fields: [cpuId], references: [id])
  cpuId String

  price                Float
  ProductDetailsOnItem ProductDetailsOnItem[]
}

model UnifiedMemory {
  id       String @id @default(uuid())
  capacity Int
  // * Relations

  UnifiedMemoryOnChip UnifiedMemoryOnChip[]
}

model UnifiedMemoryOnChip {
  id                   String                 @id @default(uuid())
  price                Float
  // * Relations
  chip                 Chip                   @relation(fields: [chipId], references: [id])
  chipId               String
  unifiedMemory        UnifiedMemory          @relation(fields: [unifiedMemoryId], references: [id])
  unifiedMemoryId      String
  ProductDetailsOnItem ProductDetailsOnItem[]
}

model Storage {
  id         String     @id @default(uuid())
  capacity   Int        @unique()
  capacityOn CapacityOn
  // * Relations

  storageOnChip StorageOnChip[]
}

model StorageOnChip {
  id                   String                 @id @default(uuid())
  price                Float
  // * Relations
  chip                 Chip                   @relation(fields: [chipId], references: [id])
  chipId               String
  storage              Storage                @relation(fields: [storageId], references: [id])
  storageId            String
  ProductDetailsOnItem ProductDetailsOnItem[]
}

model Chip {
  id                  String                @id @default(uuid())
  chipFamilyName      ChipFamilyName
  name                String                @unique()
  gama                ChipGama
  // * Relations
  configOnChip        ConfigOnChip[]
  storageOnChip       StorageOnChip[]
  unifiedMemoryOnChip UnifiedMemoryOnChip[]
  product             Product[]
}

model Category {
  id   String       @id @default(uuid())
  name CategoryName @unique
  // * Relations

  subCategory SubCategory[]
}

model SubCategory {
  id       String  @id @default(uuid())
  name     String
  slug     String  @unique
  gender   Gender
  isActive Boolean @default(true)
  //  * Relations

  category           Category             @relation(fields: [categoryId], references: [id])
  categoryId         String
  product            Product[]
  techSpecsOnProduct TechSpecsOnProduct[]
}

model TechSpecsOnProduct {
  id        String @id @default(uuid())
  name      String @unique
  techSpecs Json?
  // * Relations

  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String
  Product       Product?
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  slug        String   @unique
  price       Float    @default(0)
  release     DateTime @default(now())

  // * Relations

  chip                 Chip?              @relation(fields: [chipId], references: [id])
  chipId               String?
  subCategory          SubCategory        @relation(fields: [subCategoryId], references: [id])
  subCategoryId        String
  productPicture       ProductPicture[]   @relation("productOnPicture")
  techSpecsOnProduct   TechSpecsOnProduct @relation(fields: [techSpecsOnProductId], references: [id])
  techSpecsOnProductId String             @unique
  stockByColor         StockByColor[]     @relation("productOnStock")
  OrderItem            OrderItem[]
}

model Color {
  id               String   @id @default(uuid())
  name             String
  hexadecimalColor String   @unique
  release          DateTime @default(now())
  // * Relations

  ColorOnProduct StockByColor[]
  ProductPicture ProductPicture[]
}

model StockByColor {
  id    String @id @default(uuid())
  stock Int

  // * Relations
  product   Product @relation("productOnStock", fields: [productId], references: [id])
  productId String
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   String
}

model ProductPicture {
  id  String @id @default(uuid())
  url String
  // * Relations

  product   Product @relation("productOnPicture", fields: [productId], references: [id])
  productId String

  color   Color  @relation(fields: [colorId], references: [id])
  colorId String
}

model User {
  id            String    @id @default(uuid())
  firstName     String
  lastName      String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(CLIENT)
  picture       String?
  isActive      Boolean   @default(true)
  // * Relations

  shippingAddress ShippingAddress[]
  order           Order[]
}

model Country {
  id   String @id
  name String
  // * Relations

  shippingAddress ShippingAddress[]
}

model ShippingAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String
  // * Relations

  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  order     Order[]
}

model ProductDetailsOnItem {
  id              String         @id @default(uuid())
  //* Relations
  storageOnChip   StorageOnChip? @relation(fields: [storageOnChipId], references: [id])
  storageOnChipId String?

  unifiedMemoryOnChip   UnifiedMemoryOnChip? @relation(fields: [unifiedMemoryOnChipId], references: [id])
  unifiedMemoryOnChipId String?

  configOnChip   ConfigOnChip? @relation(fields: [configOnChipId], references: [id])
  configOnChipId String?

  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String    @unique
}

model OrderItem {
  id                   String                @id @default(uuid())
  quantity             Int
  price                Float
  //* Relations
  order                Order                 @relation(fields: [orderId], references: [id])
  orderId              String
  product              Product               @relation(fields: [productId], references: [id])
  productId            String
  productDetailsOnItem ProductDetailsOnItem?
}

model Order {
  id            String    @id @default(uuid())
  subTotal      Float
  tax           Float
  total         Float
  totalOfItems  Int
  isPaid        Boolean   @default(false)
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactionId String?

  // * Relations
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  OrderItem         OrderItem[]
}
